import React, { useState } from "react";
import Head from "next/head";
import styles from "../styles/Identities.module.css";
import {
  useStarknet,
  useConnectors,
  useStarknetCall,
} from "@starknet-react/core";
import { useEffect } from "react";
import { useRouter } from "next/router";
import Button from "../components/button";
import { MutatingDots } from "react-loader-spinner";
import Image from "next/image";

export default function Discord() {
  const router = useRouter();
  const [isConnected, setIsConnected] = useState(true);
  const [serverData, setServerData] = useState(undefined);
  const { connect, connectors } = useConnectors();
  const { account } = useStarknet();
  const { data } = useStarknetCall({
    contract: contractAddress,
    method: "getData",
    args: [serverData?.id, "discord"],
  });

  function generateRandomString() {
    let returnString = "";

    for (let index = 0; index < 31; index++) {
      returnString += Math.floor(Math.random() * 10);
    }

    return returnString;
  }

  useEffect(() => {
    if (!account) {
      setIsConnected(false);
    } else {
      setIsConnected(true);

      if (!serverData) {
        const requestOptions = {
          method: "POST",
          body: JSON.stringify({
            reference: generateRandomString(),
            type: "discord",
            code: router.query.code,
          }),
        };

        fetch("https://verify.starknet.id/start_process", requestOptions)
          .then((response) => response.json())
          .then((data) => setServerData(data));
      }
    }
  }, [account, router, serverData]);

  return (
    <div className="h-screen w-screen">
      <Head>
        <title>Starknet.id</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/starknet-logo.webp" />
      </Head>

      <div className={styles.container}>
        {!isConnected &&
          connectors.map((connector) =>
            connector.available() ? (
              <>
                <h1 className="sm:text-5xl text-5xl">
                  You need to connect anon
                </h1>
                <Button key={connector.id()} onClick={() => connect(connector)}>
                  Connect Wallet
                </Button>
              </>
            ) : null
          )}
        {(isConnected && !serverData) ||
          (!data && (
            <>
              <h1 className="sm:text-5xl text-5xl">
                Creating your starknet.id
              </h1>
              <div className="mt-5">
                <MutatingDots
                  height="100"
                  width="100"
                  color="#ff5008"
                  secondaryColor="white"
                  ariaLabel="loading"
                />
              </div>
            </>
          ))}
        {isConnected && serverData?.status === "success" && data && (
          <div className="sm:w-2/3">
            <Image
              src="/../public/memes/gigachad-chad.gif"
              height={400}
              width={236}
              alt="giga-chad"
            />
            <h1 className="sm:text-5xl text-5xl mt-2">
              What a chad ... you connected your discord successfully !
            </h1>
          </div>
        )}
        {isConnected && serverData?.status === "error" && (
          <>
            <Image
              src="/../public/memes/errorMeme.gif"
              height={227}
              width={270}
              alt="error meme"
            />
            <h1 className="sm:text-5xl text-5xl mt-4">
              Shit ... an error occurred !
            </h1>
            <Button onClick={() => router.push("/identities")}>
              Retry to connect
            </Button>
          </>
        )}
      </div>
    </div>
  );
}
