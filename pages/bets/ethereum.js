import React, { useState } from "react";
import Head from "next/head";
import styles from "../../styles/bets.module.css";
import {
  useStarknet,
  useStarknetInvoke,
  useStarknetTransactionManager,
} from "@starknet-react/core";
import { useEffect } from "react";
import { useRouter } from "next/router";
import Button from "../../components/button";
import BetInfos from "../../components/betInfos";
import { useStarkBetContract } from "../../hooks/starkBet";
import { toFelt } from "../../utils/felt";
import ErrorScreen from "../../components/errorScreen";
import SuccessScreen from "../../components/successScreen";
import LoadingScreen from "../../components/loadingScreen";

export default function TokenId() {
  const router = useRouter();
  const { account } = useStarknet();
  const [betSuccess, setBetSuccess] = useState("false");

  //Contract
  const { contract } = useStarkBetContract();
  const { transactions } = useStarknetTransactionManager();

  // Invokes
  const {
    data: betUpData,
    invoke: betUpInvoke,
    error: betUpError,
  } = useStarknetInvoke({
    contract: contract,
    method: "bet_up",
  });

  const {
    data: betDownData,
    invoke: betDownInvoke,
    error: betDownError,
  } = useStarknetInvoke({
    contract: contract,
    method: "bet_down",
  });

  const {
    data: redeemInvokeData,
    invoke: redeemInvoke,
    error: redeemInvokeError,
  } = useStarknetInvoke({
    contract: contract,
    method: "redeem",
  });

  const {
    data: closeBetData,
    invoke: closeBetInvoke,
    error: closeBetError,
  } = useStarknetInvoke({
    contract: contract,
    method: "close_bet",
  });

  function betUp() {
    betUpInvoke({
      args: [
        toFelt("28556963469423460"),
        toFelt("1000000000000000000000"),
        toFelt(1658221011),
        toFelt(1658221012),
        toFelt(
          "2087021424722619777119509474943472645767659996348769578120564519014510906823"
        ),
        [toFelt("60"), toFelt("0")],
      ],
    });
  }

  function betDown() {
    betDownInvoke({
      args: [
        toFelt("28556963469423460"),
        toFelt("1000000000000000000000"),
        toFelt(1658221011),
        toFelt(1658221012),
        toFelt(
          "2087021424722619777119509474943472645767659996348769578120564519014510906823"
        ),
        [toFelt("40"), toFelt("0")],
      ],
    });
  }

  function closeBet() {
    closeBetInvoke({
      args: [
        toFelt("28556963469423460"),
        toFelt("1000000000000000000000"),
        toFelt(1658221011),
        toFelt(1658221012),
        toFelt(
          "2087021424722619777119509474943472645767659996348769578120564519014510906823"
        ),
        [toFelt("40"), toFelt("0")],
      ],
    });
  }

  function redeem() {
    redeemInvoke({
      args: [
        toFelt("28556963469423460"),
        toFelt("1000000000000000000000"),
        toFelt(1658221011),
        toFelt(1658221012),
        toFelt(
          "2087021424722619777119509474943472645767659996348769578120564519014510906823"
        ),
      ],
    });
  }

  //Connect useEffect
  useEffect(() => {
    if (!account) {
      router.push("/home");
    }
  }, [account]);

  //Invoke useEffect
  useEffect(() => {
    for (const transaction of transactions)
      if (transaction.transactionHash === betUpData) {
        if (transaction.status === "TRANSACTION_RECEIVED") {
          setBetSuccess("loading");
        }
        if (
          transaction.status === "ACCEPTED_ON_L2" ||
          transaction.status === "ACCEPTED_ON_L1"
        ) {
          setBetSuccess("success");
        }
      } else if (transaction.transactionHash === betDownData) {
        if (transaction.status === "TRANSACTION_RECEIVED") {
          setBetSuccess("loading");
        }
        if (
          transaction.status === "ACCEPTED_ON_L2" ||
          transaction.status === "ACCEPTED_ON_L1"
        ) {
          setBetSuccess("success");
        }
      }
  }, [transactions]);

  //Error management
  const error = betDownError || betUpError;

  useEffect(() => {
    if (error) {
      setBetSuccess("error");
    }
  }, [error]);

  return (
    <div className="h-screen w-screen">
      <Head>
        <title>Starkbet</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/starknet-logo.webp" />
      </Head>

      <div className={styles.container}>
        {betSuccess === "error" && (
          <ErrorScreen
            onClick={() => router.push(`/bets`)}
            errorButton="Go to bets"
          />
        )}
        {betSuccess === "loading" && <LoadingScreen />}
        {betSuccess === "success" && (
          <SuccessScreen
            onClick={() => router.push(`/bets`)}
            successButton="Get back to bets"
            successMessage="What a chad, you loose money in a trustless way !"
          />
        )}
        {betSuccess === "false" && (
          <>
            <h1 className="sm:text-5xl text-5xl my-2">Ethereum bet</h1>
            <div className="flex">
              <BetInfos
                betUp={betUp}
                betDown={betDown}
                redeem={redeem}
                closeBet={closeBet}
              />
            </div>
            <Button onClick={() => router.push("/bets")}>Back to bets</Button>
          </>
        )}
      </div>
    </div>
  );
}
