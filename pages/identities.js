import Head from "next/head";
import styles from "../styles/Identities.module.css";
import {
  useConnectors,
  useStarknet,
  useStarknetInvoke,
  useStarknetTransactionManager,
  useStarknetCall,
} from "@starknet-react/core";
import Button from "../components/button";
import { useState, useEffect } from "react";
import { useRouter } from "next/router";
import IdentitiesGallery from "../components/identitiesGallery";
import MintIdentity from "../components/mintIdentity";
import { useStarknetIdContract } from "../hooks/starknetId";

export default function Identities() {
  //React
  const router = useRouter();
  const [minted, setMinted] = useState(false);
  const queryIdentities = [{ discord: "Ben", avatar: undefined }];
  const randomTokenId = Math.floor(
    Math.random() * 100000000000000000000000000000000
  );

  // Connection
  const { disconnect, connectors } = useConnectors();
  const connector = connectors[0];
  const { account } = useStarknet();

  //Contract
  const contract = useStarknetIdContract();
  const { data: nftsOwnedData, error } = useStarknetCall({
    contract: contract,
    method: "balance_of",
    args: [account],
  });
  const { data: mintData, invoke } = useStarknetInvoke({
    contract: contract,
    method: "mint",
  });
  const { transactions } = useStarknetTransactionManager();

  function useGetUsers() {
    const { data, isLoading } = useQuery(["users"], userService.getUsers);
    return {
      usersData: data,
      isUsersLoading: isLoading,
    };
  }

  function mint() {
    invoke({
      args: [randomTokenId],
    });
    setMinted(true);
  }

  useEffect(() => {
    if (!account) {
      console.log("account", account);
      router.push("/home");
    }

    console.log("nftsOwnedData", nftsOwnedData);
    console.log("contract", contract);
    console.log("error", error);
  }, [account, router, nftsOwnedData, contract, error]);

  return (
    <div className="h-screen w-screen">
      <Head>
        <title>Starknet.id</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/starknet-logo.webp" />
      </Head>
      {minted ? (
        <div></div>
      ) : (
        <div className={styles.container}>
          <h1 className="sm:text-5xl text-5xl">Your Starknet identities</h1>
          <div className={styles.containerGallery}>
            <IdentitiesGallery identities={queryIdentities} />
            <MintIdentity onClick={mint} />
          </div>
          <div>
            {connector?.available() ? (
              <Button
                key={connector.id()}
                onClick={() => disconnect(connector)}
              >
                Disconnect
              </Button>
            ) : null}
          </div>
        </div>
      )}
    </div>
  );
}
